<input id="colours_json" value="<%= @colours_json.to_json %>" type="hidden" />
<input id="bc_population" value="<%= @bc_population %>" type="hidden" />


<div class="row canvases">
  <h4 class="color-grey">Population of Regional Districts</h4>
  <canvas id="dev_region_population_canvas"></canvas>
  

  <div class="col-md-3"></div>
  <div class="col-md-6">
    <h4 class="color-grey">Comparison of Population in Regional Districts</h4>
    <canvas id="dev_region_population_pie_canvas"></canvas>
  </div>
  <div class="col-md-3"></div>
</div>


<script>
$(document).ready(function() {

  // colours
  var colours_json = JSON.parse( $("#colours_json").val() );
  var colours = colours_json['colours'];

  // options
  var options_population = {
    scales: {
      xAxes: [{
        ticks: {
          callback: function(label, index, labels) {
            return label/1000+'k';
          }
        },
        scaleLabel: {
          display: true,
          labelString: 'Population (1K=1,000)'
        }
      }]
    },
    tooltips: {
      callbacks: {
        label: function(tooltipItem, data) {
          return Number(tooltipItem.xLabel).toFixed(0).replace(/./g, function(c, i, a) {
            return i > 0 && c !== "." && (a.length - i) % 3 === 0 ? "," + c : c;
          });
        }
      }
    }
  };

  var options_population_pie = {
    tooltips: {
      callbacks: {
        label: function(tooltipItem, data) {
          var dataset = data.datasets[tooltipItem.datasetIndex];
          var total = dataset.data.reduce(function(previousValue, currentValue, currentIndex, array) {
            return previousValue + currentValue;
          });
          var currentValue = dataset.data[tooltipItem.index];
          var commaValue = dataset.data[tooltipItem.index].toFixed(0).replace(/./g, function(c, i, a) {
            return i > 0 && c !== "." && (a.length - i) % 3 === 0 ? "," + c : c;
          });
          var precentage = Math.floor(((currentValue/total) * 100) + 0.5);
          return commaValue + " (" + precentage + "%)";
        }
      }
    }
  };

  // data
  var bc_population = JSON.parse( $("#bc_population").val() );
  var dev_region_population_data = bc_population['population'];

  var regions = [];
  var populations = [];
  var dev_region_population_pie_bg = [];
  for (var i = 0; i < dev_region_population_data.length; i++) {
    regions.push( dev_region_population_data[i]['development region'] );
    populations.push( dev_region_population_data[i]['total'] );
    dev_region_population_pie_bg.push(colours[i]['rgba']['opacity-0.9']);
  }


  // make a bar chart for population
  new Chart($("#dev_region_population_canvas"), {
    type: "horizontalBar",
    data: {
      labels: regions,
      datasets: [{
        label: "Total",
        data: populations,
        backgroundColor: colours[0]['rgba']['opacity-0.9']
      }]
    },
    options: options_population
  });

  // make a pie chart for population of each development region
  new Chart($("#dev_region_population_pie_canvas"), {
    type: "pie",
    data: {
      labels: regions,
      datasets: [{
        data: populations,
        backgroundColor: dev_region_population_pie_bg
      }]
    },
    options: options_population_pie
  });


});
</script>