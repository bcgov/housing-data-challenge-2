<input id="greater_van" value="<%= @greater_van %>" type="hidden" />
<div id="choropleth_map" class="choropleth_map"></div>

<%= render "city_chart" %>

<script>
$(document).ready(function() {

	var map = L.map('choropleth_map',{scrollWheelZoom:false}).setView([49.2060,-122.8800], 9);
    L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', {
    	attribution: '&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors'
    }).addTo(map);
	

	var greater_van = $("#greater_van").val();
	var geojson;
	geojson = L.geoJson(JSON.parse(greater_van), {
		style: style,
		onEachFeature: onEachFeature
	}).addTo(map);


	var info = L.control();

	info.onAdd = function(map) {
	    this._div = L.DomUtil.create('div', 'info');
	    this.update();
	    return this._div;
	};

	info.update = function(props) {
	    this._div.innerHTML = '<h4>Number of Transactions</h4>' +  (props ?
	        '<b>' + props.name + '</b><br />' + props.density + ' units'
	        : 'Click or hover over each area');
	};

	info.addTo(map);

	var legend = L.control({position: 'bottomright'});

	legend.onAdd = function(map) {

	    var div = L.DomUtil.create('div', 'info legend'),
	        grades = [0, 10, 20, 50, 100, 200, 500, 1000],
	        labels = [];

	    for (var i = 0; i < grades.length; i++) {
	        div.innerHTML +=
	            '<i style="background:' + getColor(grades[i] + 1) + '"></i> ' +
	            grades[i] + (grades[i + 1] ? '&ndash;' + grades[i + 1] + '<br>' : '+');
	    }

	    return div;
	};

	legend.addTo(map);


	function getColor(d) {
	    return d > 1000 ? '#800026' :
	           d > 500  ? '#BD0026' :
	           d > 200  ? '#E31A1C' :
	           d > 100  ? '#FC4E2A' :
	           d > 50   ? '#FD8D3C' :
	           d > 20   ? '#FEB24C' :
	           d > 10   ? '#FED976' :
	                      '#FFEDA0';
	}

	function style(feature) {
	    return {
	        fillColor: getColor(feature.properties.density),
	        weight: 2,
	        opacity: 1,
	        color: 'white',
	        dashArray: '3',
	        fillOpacity: 0.7
	    };
	}

	function highlightFeature(e) {
	    var layer = e.target;

	    layer.setStyle({
	        weight: 3,
	        color: 'rgba(54, 162, 235, 1)',
	        dashArray: '',
	        fillOpacity: 0.7
	    });

	    if (!L.Browser.ie && !L.Browser.opera && !L.Browser.edge) {
	        layer.bringToFront();
	    }
	    info.update(layer.feature.properties);
	}

	function resetHighlight(e) {
	    geojson.resetStyle(e.target);
	    info.update();
	}

	function zoomToFeature(e) {
	    map.fitBounds(e.target.getBounds());
	}

	function clickFeature(e) {
		switch(e.target.feature.properties.name) {
			case "Vancouver":
				$('#VancouverModal').modal('show');
				break;
			case "Burnaby":
				$('#BurnabyModal').modal('show');
				break;
			case "Richmond":
				$('#RichmondModal').modal('show');
				break;
			case "Delta":
				$('#DeltaModal').modal('show');
				break;
			case "Surrey":
				$('#SurreyModal').modal('show');
				break;
			case "New WestMinster":
				$('#NewWestMinsterModal').modal('show');
				break;
			case "Coquitlam":
				$('#CoquitlamModal').modal('show');
				break;
			case "Port Coquitlam":
				$('#PortCoquitlamModal').modal('show');
				break;
			case "Township of Langley":
				$('#TownshipOfLangleyModal').modal('show');
				break;
			case "City of Langley":
				$('#CityOfLangleyModal').modal('show');
				break;
			case "Pitt Meadows":
				$('#PittMeadowsModal').modal('show');
				break;
			case "Maple Ridge":
				$('#MapleRidgeModal').modal('show');
				break;
			case "District of North Vancouver":
				$('#DistrictOfNorthVancouverModal').modal('show');
				break;
			case "West Vancouver":
				$('#WestVancouverModal').modal('show');
				break;
			case "White Rock":
				$('#WhiteRockModal').modal('show');
				break;
			case "UBC":
				$('#UBCModal').modal('show');
				break;
			case "Port Moody":
				$('#PortMoodyModal').modal('show');
				break;
			case "Tsawwassen First Nation":
				$('#TsawwassenFirstNationModal').modal('show');
				break;
			case "Belcarra":
				$('#BelcarraModal').modal('show');
				break;
			default:
				console.log("There no relevant city");
				break;
		}
		
	}

	function onEachFeature(feature, layer) {
	    layer.on({
	        mouseover: highlightFeature,
	        mouseout: resetHighlight,
	        //click: zoomToFeature
	        click: clickFeature
	    });
	}

});
</script>